import { EDNVal } from './types';
export interface ParseOptions {
    mapAs?: 'doubleArray' | 'object' | 'map';
    setAs?: 'object' | 'array' | 'set';
    listAs?: 'object' | 'array';
    keywordAs?: 'object' | 'string';
    charAs?: 'object' | 'string';
    tagHandlers?: {
        [tag: string]: (val: unknown) => unknown;
    };
}
declare enum ParseMode {
    idle = 0,
    string = 1,
    escape = 2,
    comment = 3
}
export declare class EDNListParser {
    stack: any[];
    mode: ParseMode;
    state: string;
    result: unknown;
    started: boolean;
    done: boolean;
    mapAs: ParseOptions['mapAs'];
    setAs: ParseOptions['setAs'];
    keywordAs: ParseOptions['keywordAs'];
    charAs: ParseOptions['charAs'];
    listAs: ParseOptions['listAs'];
    tagHandlers: ParseOptions['tagHandlers'];
    constructor({ mapAs, setAs, keywordAs, charAs, listAs, tagHandlers, }?: ParseOptions);
    updateStack(): void;
    match(): void;
    next(str: string): (EDNVal | undefined)[];
    isDone(): boolean;
}
export declare const parseEDNString: (edn: string, parseOptions?: ParseOptions) => unknown;
export {};
